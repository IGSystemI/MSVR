

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texture;
varying vec3 normalMatrixed;
uniform mat4 ModelViewMatrix, ProjectionMatrix;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 NormalMatrix;
uniform vec3 light;
uniform vec4 color;
varying vec4 Dcolor;
varying vec2 vTexcoords;

void main() {
    vec4 vertPos4 = ModelViewMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    normalMatrixed = vec3(NormalMatrix * vec4(normal, 0.0));
    vec3 N = normalize(normalMatrixed);
    vec3 L = normalize(light - vertex);
     gl_Position = ProjectionMatrix * vertPos4;
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-vertex); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular=pow(specAngle,1.0);
    }
    vec3 ambientColor = vec3(color.x*0.1, color.y*0.1,color.z*0.1);
    vec3 diffuseColor = vec3(color.x, color.y,color.z);
    vec3 specularColor = vec3(0.,0.,0.);
    Dcolor = vec4(0.9 * ambientColor +
                0.9 * lambertian * diffuseColor +
                0.9 * specular * specularColor, 1.0);
    if(color.x>0.0&&color.x<0.2){
        vTexcoords = texture;
        gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    }
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec4 Dcolor;
varying vec2 vTexcoords;
uniform sampler2D tmu;

void main() {
    gl_FragColor = color;
    if(color.x<1.0){
    //    vec4 text = texture2D(tmu, vTexcoords);
    //    gl_FragColor = text;
gl_FragColor = Dcolor;
    }
}`;